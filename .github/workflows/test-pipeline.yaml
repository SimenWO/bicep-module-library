name: Deploy Environment - TEMPLATE_PLACEHOLDER

on: 
  workflow_dispatch:
    inputs:
      run_job:
          description: 'Run the job (true/false)'
          required: true
          default: 'false'

permissions:
  id-token: write
  contents: write
  pull-requests: write

env:
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  LOCATION: 'westeurope'
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  DEPLOYMENT_NAME: 'Deploy-environment-${{ github.run_number }}'
  STORAGE_BICEP_FILE: './environment/deploystorage.bicep'
  STORAGE_BICEP_FILE_PARAM: './environment/deploystorage.bicepparam'

jobs:
  # LintValidate:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4.1.7
  #     - uses: azure/login@v2.1.1
  #       with:
  #         client-id: ${{ env.ARM_CLIENT_ID }}
  #         tenant-id: ${{ env.ARM_TENANT_ID }}
  #         subscription-id: ${{ env.ARM_SUBSCRIPTION_ID }}
  #     - uses: Azure/cli@v2.0.0
  #       with:
  #         inlineScript: |
  #           echo "Linting Bicep file"
  #           az bicep build --file ${{ env.STORAGE_BICEP_FILE }}
  #       env:
  #         AZURE_CORE_COLLECT_TELEMETRY: 'no'
  #     - uses: Azure/cli@v2.0.0
  #       with:
  #         inlineScript: |
  #           echo "Building and What-If Bicep file"
  #           az bicep build --file ${{ env.STORAGE_BICEP_FILE }}
  #           az deployment sub what-if --location ${{ env.LOCATION }} --template-file ${{ env.STORAGE_BICEP_FILE }} --parameters ${{ env.STORAGE_BICEP_FILE_PARAM }}
  #       env:
  #         AZURE_CORE_COLLECT_TELEMETRY: 'no'

  deployAndUpload:
    runs-on: ubuntu-latest
    if: github.event.inputs.run_job == 'true'
    steps:
      - uses: actions/checkout@v4.1.7
      - uses: azure/login@v2.1.1
        with:
          client-id: ${{ env.ARM_CLIENT_ID }}
          tenant-id: ${{ env.ARM_TENANT_ID }}
          subscription-id: ${{ env.ARM_SUBSCRIPTION_ID }}
      
      - name: Fetch parameters
        id: fetchParams
        shell: pwsh
        run: |
          $parametersJson = (bicep build-params ${{ env.STORAGE_BICEP_FILE_PARAM }} --stdout | ConvertFrom-Json).parametersJson | ConvertFrom-Json
          $deployEnvironment = $parametersJson.parameters.deploymentEnvironment.value
          $avdWorkloadSubsId = $parametersJson.parameters.avdWorkloadSubsId.value
          $avdSessionHostLocation = $parametersJson.parameters.avdSessionHostLocation.value
          $enableCustomScripts = $parametersJson.parameters.enableCustomScripts.value

           echo "deployEnvironment::$deployEnvironment" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          echo "avdWorkloadSubsId::$avdWorkloadSubsId" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          echo "avdSessionHostLocation::$avdSessionHostLocation" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          echo "enableCustomScripts::$enableCustomScripts" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Validate Prerequisite Resources
        uses: azure/arm-deploy@v2
        with:
          scope: subscription
          region: ${{ env.LOCATION }}
          subscriptionId: ${{ env.ARM_SUBSCRIPTION_ID }}
          template: './environment/deploystorage.bicep'
          parameters: >
            deploymentEnvironment=${{ steps.fetchParams.outputs.deployEnvironment }}
            avdWorkloadSubsId=${{ steps.fetchParams.outputs.avdWorkloadSubsId }}
            avdSessionHostLocation=${{ steps.fetchParams.outputs.avdSessionHostLocation }}
            enableCustomScripts=${{ steps.fetchParams.outputs.enableCustomScripts }}
          failOnStdErr: false
          deploymentMode: Validate  

      - name: Deploy Prerequisite Resources
        id: deploy
        uses: azure/arm-deploy@v2
        with:
          scope: subscription
          region: ${{ env.LOCATION }}
          subscriptionId: ${{ env.ARM_SUBSCRIPTION_ID }}
          template: './environment/deploystorage.bicep'
          parameters: >
            deploymentEnvironment=${{ steps.fetchParams.outputs.deployEnvironment }}
            avdWorkloadSubsId=${{ steps.fetchParams.outputs.avdWorkloadSubsId }}
            avdSessionHostLocation=${{ steps.fetchParams.outputs.avdSessionHostLocation }}
            enableCustomScripts=${{ steps.fetchParams.outputs.enableCustomScripts }}
          failOnStdErr: false  

      - name: Upload files to Storage Account
        run: |
          find modules/scripts/ -type f | while read file; do
            az storage blob upload --account-name ${{ steps.deploy.outputs.storageAccountName }} --container-name ${{ steps.deploy.outputs.containerName }} --file "$file" --name "$(basename $file)" --auth-mode login --overwrite
          done
    outputs:
      storageAccountName: ${{ steps.deploy.outputs.storageAccountName }}
      containerName: ${{ steps.deploy.outputs.containerName }}

  test:
    runs-on: ubuntu-latest
    needs: deployAndUpload
    steps:
      - uses: actions/checkout@v4.1.7
      - run: echo "Running tests ${{ needs.deployAndUpload.outputs.storageAccountName }}"
       
