name: 'Publish Module'
description: 'Publishes and updates module in ACR'
inputs:
  moduleFilePath:
    description: 'Path to the module file'
    required: true
  versionFilePath:
    description: 'Path to the version file'
    required: true
  repoName:
    description: 'Repository name'
    required: true
  registryName:
    description: 'Registry name'
    required: true
  azureCredentials:
    description: 'Azure credentials in JSON format'
    required: true

runs:
  using: 'composite'
  steps:
    - run: |
        az login --service-principal -u ${{ inputs.azureCredentials.clientId }} -p ${{ inputs.azureCredentials.clientSecret }} --tenant ${{ inputs.azureCredentials.tenantId }}
        pwsh -File ./scripts/module-version.ps1 -registryName ${{ inputs.registryName }} -repositoryName ${{ inputs.repoName }} -versionPath ${{ inputs.versionFilePath }}
      shell: bash
      env:
        AZURE_CREDENTIALS: ${{ inputs.azureCredentials }}
        
    - name: Update/check version on module
      run: |
        pwsh -File ./scripts/module-version.ps1 -registryName ${{ secrets.MODULE_REGISTRY_NAME }} -repositoryName ${{ env.MODULE_REPO_NAME }} -versionPath ${{ env.MODULE_VERSION_FILE_PATH }}
      shell: bash

    # Check if the new version already exist in the ACR
    - name: Check if version exists in ACR
      id: check_version
      run: |
        existingTags=$(az acr repository show-tags --name ${{ secrets.MODULE_REGISTRY_NAME }} --repository ${{ env.MODULE_REPO_NAME }} --orderby time_desc --output tsv)
        echo "::set-output name=exists::$(echo $existingTags | grep -w $(newVersion) || echo 'false')"
      shell: bash
    
    # Publish if the new version is not in ACR
    - name: Publish module
      if: steps.check_version.outputs.exists == 'false'
      run: |
        az bicep publish --target 'br:${{ secrets.MODULE_REGISTRY_NAME }}.azurecr.io/${{ env.MODULE_REPO_NAME }}:${{ env.newVersion }}' --file ${{ env.MODULE_FILE_PATH }} --with-source
      shell: bash
